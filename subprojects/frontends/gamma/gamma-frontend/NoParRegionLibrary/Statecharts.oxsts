/*
 * SPDX-FileCopyrightText: 2025 The Semantifyr Authors
 *
 * SPDX-License-Identifier: EPL-2.0
 */

package Statecharts

import Expressions
import Variables
import Components
import Triggers
import Actions
import Events

type Statechart : Component {
    feature regions : Region[0..*]
    feature variables : Variable[0..*]

    override init {
        inline seq regions -> activateRecursive
    }

    override tran {
        inline resetOutputEvents()
        inline regions.fireTransitions()
        inline resetInputEvents()
    }
}

type Region {
    feature states : State[0..*]

    ctrl var activeState : states[0..1] = Nothing

    feature abstractTransitions : AbstractTransition[0..*]

    feature transitions :> abstractTransitions : Transition[0..*]
    feature entryTransitions :> abstractTransitions : EntryTransition[0..*]

    tran activateRecursive {
        inline seq entryTransitions -> main
    }

    tran deactivateRecursive {
        inline seq states -> deactivateRecursive
    }

    tran fireTransitions {
        inline choice transitions -> main else {
            inline choice states -> fireTransitions else { }
        }
    }
}

pattern parentState(childState: State, parentState: State) {
    State.regions(parentState, parentRegion)
    Region.states(parentRegion, childState)
}

pattern parentRegion(childState: State, parentRegion: Region) {
    Region.states(parentRegion, childState)
}

type State {
    derived reference parent : Region[0..1] as pattern parentRegion
    derived reference parentState : State[0..1] as pattern parentState

    feature regions : Region[0..*]

    feature entryActions : Action[0..*]
    feature exitActions : Action[0..*]

    prop isActive {
        parent.activeState == Self
    }

    tran deactivateRecursive {
        inline regions.deactivateRecursive()

        if (parent.activeState == Self) {
            parent.activeState := Nothing
            inline seq exitActions -> main
        }
    }

    tran exitRecursive(commonRegion : Region) {
        inline seq exitActions -> main

        parent.activeState := Nothing

        inline if (commonRegion != parent) {
            inline parentState.exitRecursive(commonRegion)
        }
    }

    tran exit(commonRegion : Region) {
        inline exitRecursive(commonRegion)

        inline regions.deactivateRecursive()
    }

    tran enterRecursive(commonRegion : Region) {
        inline if (commonRegion != parent) {
            inline parentState.enterRecursive(commonRegion)
        }

        parent.activeState := Self

        inline seq entryActions -> main
    }

    tran enter(commonRegion : Region) {
        inline enterRecursive(commonRegion)

        inline regions.activateRecursive()
    }

    tran fireTransitions {
        inline if (regions == Nothing) {
            assume (false)
        } else {
            assume (isActive)
            inline regions.fireTransitions()
        }
    }
}

pattern transitionParentRegion(transition: AbstractTransition, region: Region) {
    Region.transitions(region, transition)
}

// Disallow states with parallel regions
neg constraint noParallelRegionsState(state: State) {
    State.regions(state, r1)
    State.regions(state, r2)
    r1 != r2
}

// Disallow statecharts with parallel regions
neg constraint noParallelRegionsSC(sc: Statechart) {
    Statechart.regions(state, r1)
    Statechart.regions(state, r2)
    r1 != r2
}

type AbstractTransition {
    derived reference commonRegion : Region[1..1] as pattern transitionParentRegion

    reference to : State[1..1]

    virtual tran { }
}

type EntryTransition : AbstractTransition {
    override tran {
        inline to.enter(commonRegion)
    }
}

type Transition : AbstractTransition {
    reference from : State[0..1]

    feature trigger : Trigger
    feature actions : Action[0..*]
    feature guards : Guard[0..*]

    tran {
        inline seq guards -> main
        inline trigger.isTriggered()
        assume (from.isActive)

        inline from.exit(commonRegion)
        inline seq actions -> main
        inline to.enter(commonRegion)
    }
}

type StateReachabilityExpression : Expression {
    reference state : State
    
    prop evaluate {
        state.isActive
    }
}

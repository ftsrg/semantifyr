package Expressions

import Variables

type VariableExpression : Expression {
    reference variable : Variable
    prop evaluate { variable.evaluate }
}

type Expression {
    prop evaluate { false }
}

type LiteralExpression : Expression
type LiteralBooleanExpression : LiteralExpression {
    reference value : Boolean
    prop evaluate { value }
}
type LiteralIntegerExpression : LiteralExpression {
    reference value : Integer
    prop evaluate { value }
}

type OperatorExpression : Expression {
    feature left : Expression[1..1]
    feature right : Expression[1..1]
}

type LessThanOperatorExpression : OperatorExpression {
    prop evaluate { left.evaluate < right.evaluate }
}

type LessThanOrEqualsOperatorExpression : OperatorExpression {
    prop evaluate { left.evaluate <= right.evaluate }
}

type GreaterThanOperatorExpression : OperatorExpression {
    prop evaluate { left.evaluate > right.evaluate }
}

type GreaterThanOrEqualsOperatorExpression : OperatorExpression {
    prop evaluate { left.evaluate >= right.evaluate }
}

type PlusOperatorExpression : OperatorExpression {
    prop evaluate { left.evaluate + right.evaluate }
}

type MinusOperatorExpression : OperatorExpression {
    prop evaluate { left.evaluate - right.evaluate }
}

type EqualityOperatorExpression : OperatorExpression {
    prop evaluate { left.evaluate == right.evaluate }
}

type InequalityOperatorExpression : OperatorExpression {
    prop evaluate { left.evaluate != right.evaluate }
}

type OrOperatorExpression : OperatorExpression {
    prop evaluate { left.evaluate || right.evaluate }
}

type AndOperatorExpression : OperatorExpression {
    prop evaluate { left.evaluate && right.evaluate }
}

type NotExpression : Expression {
    feature operand : Expression
    prop evaluate { ! operand.evaluate }
}

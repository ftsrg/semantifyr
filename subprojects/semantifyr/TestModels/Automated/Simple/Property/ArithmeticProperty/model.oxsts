/*
 * SPDX-FileCopyrightText: 2025 The Semantifyr Authors
 *
 * SPDX-License-Identifier: EPL-2.0
 */

package IntegerPropertyTest

type IntegerVariable {
    var variable : Integer
}

abstract type Expression {
    prop evaluate { false }
}

type VariableReferenceExpression : Expression {
    reference variable : IntegerVariable
    prop evaluate { variable.variable }
}

type LiteralIntegerExpression : Expression {
    reference value : Integer
    prop evaluate { value }
}

type LiteralBooleanExpression : Expression {
    reference value : Boolean
    prop evaluate { value }
}

type OperatorExpression : Expression {
    feature leftOperand : Expression[1..1]
    feature rightOperand : Expression[1..1]
}

type LessThanExpression : OperatorExpression {
    prop evaluate { leftOperand.evaluate < rightOperand.evaluate }
}

target Mission {
    containment v1 : IntegerVariable
    containment lte : LessThanExpression {
        containment ::> leftOperand : VariableReferenceExpression {
            reference ::> variable : IntegerVariable = v1
        }
        containment ::> rightOperand : LiteralIntegerExpression {
            reference ::> value : Integer = 0
        }
    }

    init {
        v1.variable := 10
    }

    tran {
        v1.variable := v1.variable - 1
    }

    prop { lte.evaluate }
}
